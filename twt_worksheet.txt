CREATE DATABASE TWT;
CREATE SCHEMA TWT;

CREATE OR REPLACE STORAGE INTEGRATION s3_twt
  TYPE = EXTERNAL_STAGE
  STORAGE_PROVIDER = S3
  ENABLED = TRUE 
  STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::224849216410:user/snowflake-user'
  STORAGE_ALLOWED_LOCATIONS = ('s3://snowflake-udemy-vmzl/');

DESC INTEGRATION s3_twt;
SHOW INTEGRATIONS like 's3_twt';

CREATE OR REPLACE file format json_twt_fileformat
    TYPE = JSON;
    

CREATE OR REPLACE table twt_raw (
    raw variant);
    
CREATE OR REPLACE STAGE twt_stage
    URL = 's3://snowflake-udemy-vmzl/'
    STORAGE_INTEGRATION = s3_twt
    FILE_FORMAT = json_twt_fileformat;


COPY INTO twt_raw
    FROM @twt_stage
    file_format= json_twt_fileformat;
    
   
SELECT * FROM twt_raw;





CREATE OR REPLACE TABLE twt_user (
  screen_name STRING PRIMARY KEY,
  username STRING NOT NULL,
  user_favourites_count NUMBER NOT NULL,
  user_followers_count NUMBER NOT NULL,
  user_friends_count NUMBER NOT NULL,
  user_listed_count NUMBER NOT NULL,
  user_statuses_count NUMBER NOT NULL,
  verified STRING NOT NULL,
  verified_type STRING NOT NULL,
  last_updated DATETIME NOT NULL
);

CREATE OR REPLACE TABLE twt_tweet (
    id STRING PRIMARY KEY,
    created_at DATETIME NOT NULL,
    user_screen_name STRING NOT NULL,
    text STRING NOT NULL,
    tweet_favorite_count NUMBER NOT NULL,
    tweet_quote_count NUMBER NOT NULL,
    tweet_reply_count NUMBER NOT NULL,
    tweet_retweet_count NUMBER NOT NULL
);



//CREATE PIPE
CREATE OR REPLACE PIPE twt_pipe
auto_ingest = TRUE
AS
COPY INTO twt_raw
FROM @twt_stage;
// Describe pipe
DESC pipe twt_pipe;
//ERROR HANDLING
//Check which file the pipe tried to load
ALTER PIPE twt_pipe refresh;
// Validate pipe is actually working
SELECT SYSTEM$PIPE_STATUS('twt_pipe');
// Snowpipe error message
SELECT * FROM TABLE(VALIDATE_PIPE_LOAD(
    PIPE_NAME => 'twt_pipe',
    START_TIME => DATEADD(HOUR,-2,CURRENT_TIMESTAMP())));
// COPY command history from table to see error massage
SELECT * FROM TABLE (INFORMATION_SCHEMA.COPY_HISTORY(
   table_name  =>  'twt_raw',
   START_TIME =>DATEADD(HOUR,-2,CURRENT_TIMESTAMP())));
   
   
truncate twt_parsed;
truncate twt_tweet;
truncate twt_user;

select * from twt_raw;
select * from twt_parsed;

CREATE OR REPLACE STREAM twt_raw_stream 
ON TABLE twt_raw
APPEND_ONLY = TRUE;

SELECT * FROM twt_raw_stream;


CREATE OR REPLACE TASK TWT_PARSE_RAW_STREAM
    WAREHOUSE = COMPUTE_WH
    SCHEDULE = '5 MINUTE'
    AS 
    CREATE OR REPLACE TABLE twt_parsed as
    SELECT DISTINCT
    RAW:id::STRING as id,
    RAW:created_at::DATETIME as created_at,  
    RAW:screenname::STRING as screen_name,
    RAW:username::STRING as username,
    RAW:user_favourites_count::NUMBER as user_favourites_count,
    RAW:user_followers_count::NUMBER as user_followers_count,
    RAW:user_friends_count::NUMBER as user_friends_count,
    RAW:user_listed_count::NUMBER as user_listed_count,
    RAW:user_statuses_count::NUMBER as user_statuses_count,
    RAW:verified::STRING as verified,
    RAW:verified_type::STRING as verified_type,
    RAW:text::STRING as text,
    RAW:tweet_favorite_count::NUMBER as tweet_favorite_count,
    RAW:tweet_quote_count::NUMBER as tweet_quote_count,
    RAW:tweet_reply_count::NUMBER as tweet_reply_count,
    RAW:tweet_retweet_count::NUMBER as tweet_retweet_count
    FROM twt_raw_stream;


CREATE OR REPLACE TASK TWT_FILL_USER
    WAREHOUSE = COMPUTE_WH
    AFTER TWT_PARSE_RAW_STREAM
    AS 
    MERGE INTO twt_user u
    USING 
    (SELECT * FROM twt_parsed
     QUALIFY row_number() over (
      partition by 
        screen_name
      order by
        created_at desc
    ) = 1 ) p ON u.screen_name = p.screen_name
    WHEN MATCHED THEN UPDATE
        set u.username = p.username,
            u.user_favourites_count = p.user_favourites_count,
            u.user_followers_count = p.user_followers_count,
            u.user_friends_count = p.user_friends_count,
            u.user_listed_count = p.user_listed_count,
            u.user_statuses_count = p.user_statuses_count,
            u.verified = p.verified,
            u.verified_type = p.verified_type,
            u.last_updated = p.created_at
    WHEN NOT MATCHED
        THEN INSERT
        (screen_name,username,user_favourites_count,user_followers_count,user_friends_count,user_listed_count,user_statuses_count,verified,verified_type,last_updated)
        VALUES
        (screen_name,username,user_favourites_count,user_followers_count,user_friends_count,user_listed_count,user_statuses_count,verified,verified_type,created_at);

CREATE OR REPLACE TASK TWT_FILL_TWEET
    WAREHOUSE = COMPUTE_WH
    AFTER TWT_PARSE_RAW_STREAM
    AS
    MERGE INTO twt_tweet t
    USING twt_parsed p ON t.id = p.id
    WHEN NOT MATCHED
        THEN INSERT
        (id,created_at,user_screen_name,text,tweet_favorite_count,tweet_quote_count,tweet_reply_count,tweet_retweet_count)
        VALUES
        (id,created_at,screen_name,text,tweet_favorite_count,tweet_quote_count,tweet_reply_count,tweet_retweet_count);
    


ALTER TASK TWT_FILL_TWEET RESUME;
ALTER TASK TWT_FILL_USER RESUME;
ALTER TASK TWT_PARSE_RAW_STREAM RESUME;

select *
  from table(information_schema.task_history())
  order by scheduled_time desc;  
  
SHOW TASKS;

select * from twt_tweet;
select count(*) from twt_user;
SELECT * FROM twt_raw_stream;

